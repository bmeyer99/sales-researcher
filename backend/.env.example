# Backend API Configuration
# PYTHONUNBUFFERED=1 # Already set in Dockerfile, but can be here for local dev consistency
# HOST=0.0.0.0
# PORT=8000

# Redis Configuration (for Celery)
REDIS_URL=redis://localhost:6379/0 # For local development if Redis runs on host
CELERY_RESULTS_BACKEND_URL=redis://localhost:6379/0 # For local development if Redis runs on host
REDIS_PASSWORD="your_redis_password" # Set a strong password for Redis
# For Docker Compose, use:
# REDIS_URL=redis://redis:6379/0
# CELERY_RESULTS_BACKEND_URL=redis://redis:6379/0

# Google OAuth Credentials
# These will be obtained from Google Cloud Console
GOOGLE_CLIENT_ID="YOUR_GOOGLE_CLIENT_ID"
GOOGLE_CLIENT_SECRET="YOUR_GOOGLE_CLIENT_SECRET"
# Redirect URI for OAuth callback - ensure this matches Google Cloud Console.
# This should be your PUBLIC frontend URL + /auth/google/callback, as Next.js will proxy it.
# Example: https://research.no13productions.com/auth/google/callback
GOOGLE_REDIRECT_URI="https://research.no13productions.com/auth/google/callback"

# Gemini API Key
GEMINI_API_KEY="YOUR_GEMINI_API_KEY"

# Google Application Credentials (if using a service account for some GDrive operations - less likely for user-specific Drive access)
# GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/service-account-file.json" # Path within the container if used

# Secret key for signing JWTs or session data (if applicable)
# SECRET_KEY="your-very-secret-random-string"

# CORS Origins (if frontend and backend are on different ports/domains during development)
# FRONTEND_URL="http://localhost:3000"
# ALLOWED_ORIGINS="http://localhost:3000,https://your-production-domain.com"
